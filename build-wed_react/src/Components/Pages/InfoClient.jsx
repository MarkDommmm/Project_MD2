import React, { useEffect, useState } from 'react';
import HeadingPage from '../layout/HeadingPage';
import NavPage from '../layout/NavPage';
import FooterPage from '../layout/FooterPage';
import axios from 'axios';
import { order } from '../../redux/action';
import { useDispatch, useSelector } from 'react-redux';
import swal from 'sweetalert';
import { useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2/dist/sweetalert2.js'


function InfoClient() {
    const [infoUser, setInfoUser] = useState({
        username: '',
        address: '',
        phone: '',
        email: '',
        note: '',
        bank: '',
    });
    const [cartAPI, setCartAPI] = useState([]);
    const [loginUser, setLoginUser] = useState([]);
    const [check, setCheck] = useState(true);
    const dispatch = useDispatch();
    const navigate = useNavigate()
    const checkCart = useSelector((state => state.checkCart))


    const totalPrice = cartAPI.reduce(
        (total, product) =>
            total +
            parseInt(product.price.replaceAll('.', '')) * product.cartQuantity,
        0
    );

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setInfoUser((prevInfoUser) => ({
            ...prevInfoUser,
            [name]: value,
        }));
    };

    // H√†m ƒë·∫∑t h√†ng==============================================================
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (validateForm()) {
            let timerInterval
            Swal.fire({
                title: 'üíñThanks For Allüíñ',
                html: 'I will close in <b></b> milliseconds.',
                timer: 3000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                    const b = Swal.getHtmlContainer().querySelector('b')
                    timerInterval = setInterval(() => {
                        b.textContent = Swal.getTimerLeft()
                    }, 100)
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    dispatch(
                        order({
                            ...infoUser,
                            transport: 'ƒêang x·ª≠ l√Ω!',
                            order: cartAPI,
                            async: !checkCart,
                        })
                    );
                    navigate("/");
                }
            })
            const postsIdsArray = cartAPI.map((pd) => pd.id);
            postsIdsArray.forEach(async (id) => {
                await axios.delete(`http://localhost:7777/cartAPI/${id}`);
            });
        }
    };



    const validateForm = () => {
        let isValid = true;

        if (!infoUser.username || infoUser.username.trim() === '') {
            isValid = false;
            swal('Error', 'Please enter your name', 'error');
        }

        if (!infoUser.address || infoUser.address.trim() === '') {
            isValid = false;
            swal('Error', 'Please enter your address', 'error');
        }

        if (!infoUser.phone || infoUser.phone.trim() === '' && infoUser.phone.length > 10) {
            isValid = false;
            swal('Error', 'Please enter your phone number', 'error');
        }

        if (!infoUser.email || infoUser.email.trim() === '') {
            isValid = false;
            swal('Error', 'Please enter your email', 'error');
        } else if (
            !/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/g.test(infoUser.email.trim())
        ) {
            isValid = false;
            swal('Error', 'Please enter a valid email address', 'error');
        }

        if (!infoUser.bank || infoUser.bank.trim() === '') {
            isValid = false;
            swal('Error', 'Please select a payment method', 'error');
        }

        return isValid;
    };

    const loadCart = async () => {
        try {
            const cartRes = await axios.get('http://localhost:7777/cartAPI');
            setCartAPI(cartRes.data);

            const loginRes = await axios.get('http://localhost:7777/loginUser');
            setLoginUser(loginRes.data);
        } catch (error) {
            console.error('Error loading cart:', error);
        }
    };

    useEffect(() => {
        loadCart();
    }, [check]);

    return (
        <div id="container">
            <div className="text_heading">
                <h3>Thanh To√°n</h3>
                <p>
                    B·∫°n c√≥ m√£ ∆∞u ƒë√£i?{" "}
                    <a href="">
                        <i>·∫§n v√†o ƒë√¢y ƒë·ªÉ nh·∫≠p m√£</i>
                    </a>
                </p>
            </div>
            <div className="content_infoClient">
                <form id="form">
                    <div>
                        <h5>TH√îNG TIN THANH TO√ÅN</h5>
                        <label htmlFor="username">H·ªç v√† t√™n *</label>
                        <input
                            onChange={handleInputChange}
                            type="text"
                            id="username_input"
                            name="username"
                            placeholder="Nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n c·ªßa b·∫°n"
                        />
                        <br />
                        <br />
                        <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
                        <input
                            onChange={handleInputChange}

                            type="text"
                            name="address"
                            id="address"
                            placeholder="V√≠ d·ª•: s·ªë xx ng√µ xx Thi√™n Hi·ªÅn, Nam T·ª´ Li√™m, H√† N·ªôi"
                        />
                        <br />
                        <br />
                        <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i*</label>
                        <input
                            type="text"
                            name="phone"
                            id="phone"
                            placeholder='0944448286'
                            onChange={handleInputChange}
                        />
                        <br />
                        <br />
                        <label htmlFor="email">ƒê·ªãa ch·ªâ email*</label>
                        <input
                            onChange={handleInputChange}
                            type="email"
                            name="email"
                            id="email"
                            placeholder="phanhoanghieu1999@gmail.com"
                        />
                        <h5>TH√îNG TIN B·ªî SUNG</h5>
                        <p>Ghi ch√∫ ƒë∆°n h√†ng (tu·ª≥ ch·ªçn)</p>
                        <textarea
                            onChange={handleInputChange}
                            name="note"
                            id="note"
                            cols={5}
                            rows={5}
                            placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng, v√≠ d·ª•: th·ªùi gian hay ch·ªâ d·∫´n ƒë·ªãa ƒëi·ªÉm giao h√†ng chi ti·∫øt h∆°n"
                            defaultValue={""}
                        />
                    </div>
                    <div>
                        <h5>ƒê∆†N H√ÄNG C·ª¶A B·∫†N</h5>
                        <table className="table-infoClient">
                            <thead>
                                <tr>
                                    <th>S·∫¢N PH·∫®M</th>
                                    <th className='tamtinh'>T·∫†M T√çNH</th>
                                </tr>
                            </thead>
                            <tbody id="tbody-infoClient">
                                {cartAPI.map((e, i) => (
                                    <tr key={i}>
                                        <td className="text_table_infoClient">ƒê·ªìng h·ªì {e.nameproduct}
                                            <span className="gold"> X </span> {e.cartQuantity}</td>
                                        <td className="gold">{e.price}<span className="white">ƒë</span></td>
                                    </tr>
                                ))}
                            </tbody>
                            {/* <tfoot>
                                <tr>
                                    <td>
                                        <b>T·ªïng</b>
                                    </td>
                                    <td id="total_price" className="gold">
                                        {totalPrice.toLocaleString("vi-VN", {
                                            useGrouping: true,
                                        })}
                                        <i className="white">ƒë</i>
                                    </td>
                                </tr>
                            </tfoot> */}
                        </table>
                        <div className='total_price_infoClient'>
                            <h5>T·ªïng :</h5>
                            <p id="total_price" className="gold">
                                {totalPrice.toLocaleString("vi-VN", {
                                    useGrouping: true,
                                })}
                                <i className="white">ƒë</i>
                            </p>
                        </div>
                        <label htmlFor="bank">
                            <input
                                onChange={handleInputChange}
                                type="radio"
                                name="bank"
                                id="bank"
                                className="bank"
                                defaultValue="Chuy·ªÉn kho·∫£n ng√¢n h√†ng."
                                required=""
                            />
                            Chuy·ªÉn kho·∫£n ng√¢n h√†ng.
                        </label>
                        <br />
                        <br />
                        <label htmlFor="bank">
                            <input
                                onChange={handleInputChange}

                                type="radio"
                                name="bank"
                                id="bank"
                                className="bank"
                                defaultValue="Tr·∫£ ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng."
                                required=""
                            />
                            Tr·∫£ ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng.
                        </label>
                        <br />
                        <button className="btn_order" onClick={handleSubmit}>ƒê·∫∂T H√ÄNG</button>
                        <p>
                            Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng, tƒÉng tr·∫£i
                            nghi·ªám s·ª≠ d·ª•ng website, v√† cho c√°c m·ª•c ƒë√≠ch c·ª• th·ªÉ kh√°c ƒë√£ ƒë∆∞·ª£c m√¥ t·∫£
                            trong <i className="gold">ch√≠nh s√°ch ri√™ng t∆∞</i> c·ªßa ch√∫ng t√¥i.
                        </p>
                    </div>
                </form>
            </div>

        </div>

    )
}

export default InfoClient